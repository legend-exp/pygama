{
  "outputs": [
    "timestamp",
    "channel",
    "trapEmax",
    "bl_mean",
    "bl_sig",
    "A_10",
    "AoE",
    "waveform",
    "wf_blsub"
  ],
  "processors": {
    "bl_mean , bl_sig, bl_slope, bl_intercept": {
      "function": "linear_slope_fit",
      "module": "pygama.dsp.processors",
      "args": [
        "waveform[0: 1000]",
        "bl_mean",
        "bl_sig",
        "bl_slope",
        "bl_intercept"
      ],
      "unit": ["ADC", "ADC", "ADC", "ADC"]
    },
    "wf_blsub": {
      "function": "subtract",
      "module": "numpy",
      "args": ["waveform", "bl_mean", "wf_blsub"],
      "unit": "ADC"
    },
    "wf_pz": {
      "function": "pole_zero",
      "module": "pygama.dsp.processors",
      "args": ["wf_blsub", "db.pz_const", "wf_pz"],
      "unit": "ADC",
      "defaults": { "db.pz_const": "72*us" }
    },
    "wf_trap": {
      "function": "trap_norm",
      "module": "pygama.dsp.processors",
      "args": ["wf_pz", "10*us", "5*us", "wf_trap"],
      "unit": "ADC"
    },
    "wf_atrap": {
      "function": "asym_trap_filter",
      "module": "pygama.dsp.processors",
      "args": ["wf_pz", "0.05*us", "2*us", "3*us", "wf_atrap"],
      "unit": "ADC"
    },
    "tp_min, tp_max, wf_min, wf_max": {
      "function": "min_max",
      "module": "pygama.dsp.processors",
      "args": ["waveform", "tp_min", "tp_max", "wf_min", "wf_max"],
      "unit": ["ns", "ns", "ADC", "ADC"]
    },
    "tp_0": {
      "function": "time_point_thresh",
      "module": "pygama.dsp.processors",
      "args": ["wf_atrap", 0, "tp_max", 0, "tp_0"],
      "unit": "ns"
    },
    "trapEmax": {
      "function": "amax",
      "module": "numpy",
      "args": ["wf_trap", 1, "trapEmax"],
      "kwargs": { "signature": "(n),()->()", "types": ["fi->f"] },
      "unit": "ADC"
    },
    "curr10": {
      "comment": "3rd argument allocates memory for a derivative of type float",
      "function": "avg_current",
      "module": "pygama.dsp.processors",
      "args": ["wf_pz", 10, "curr10(len(wf_pz)-10, 'f')"],
      "unit": "ADC/sample"
    },
    "A_10": {
      "function": "amax",
      "module": "numpy",
      "args": ["curr10", 1, "A_10"],
      "kwargs": { "signature": "(n),()->()", "types": ["fi->f"] },
      "unit": "ADC"
    },
    "AoE": {
      "function": "divide",
      "module": "numpy",
      "args": ["A_10", "trapEmax", "AoE"],
      "unit": "1/sample"
    }
  }
}
